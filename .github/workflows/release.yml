name: Release Torrent Tidy
on:
  workflow_dispatch:       # 允许手动触发
  push:
    tags:
      - "v[0-9]*"         # 当推送类似 v1.0.0 的标签时触发

env:
  BIN_NAME: torrent_tidy  # 生成的二进制文件名
  VERSION: ${{ github.ref_name }}  # 从标签获取版本号

permissions:
  contents: write         # 允许上传到 GitHub Release

jobs:
  create-release:
    name: Create Release Draft
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub Release Draft
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create --draft $VERSION

  build-and-publish:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: create-release  # 依赖 Release 创建步骤
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux 平台 (静态链接 musl 增强兼容性)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04

          # Windows 平台
          - target: x86_64-pc-windows-msvc
            os: windows-2022

          # macOS 平台
          - target: x86_64-apple-darwin
            os: macos-14
          - target: aarch64-apple-darwin
            os: macos-14

    steps:
      - uses: actions/checkout@v4

      # 缓存加速依赖下载 (跳过 Windows)
      - name: Cache Cargo Dependencies
        if: ${{ !contains(matrix.target, '-pc-windows-') }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
          key: cargo-${{ hashFiles('**/Cargo.lock') }}

      # 安装 Rust 工具链
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: stable

      # 安装跨平台编译工具链
      - name: Install Cross Tools
        if: contains(matrix.target, 'linux')
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      # 编译 Release 版本
      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      # 处理文件名后缀
      - name: Prepare Artifact
        id: package
        run: |
          EXE_suffix="" ; case ${{ matrix.target }} in *-pc-windows-*) EXE_suffix=".exe" ;; esac
          BIN_PATH="target/${{ matrix.target }}/release/${NAME}${EXE_suffix}"
          PKG_NAME=${NAME}-${{ matrix.target }}${EXE_suffix}
          cp ${BIN_PATH} ${PKG_NAME}
          echo "artifact=${PKG_NAME}" >> $GITHUB_OUTPUT

      # 上传到 GitHub Release
      - name: Upload Release Asset
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload $VERSION ${{ steps.package.outputs.artifact }}
